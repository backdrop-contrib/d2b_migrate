<?php

define('D2B_MIGRATE_UPDATE_DEFAULT_URL', 'https://updates.backdropcms.org/release-history');

/**
* Implements hook_menu().
*/
function d2b_migrate_menu() {
  $items['d2b-migrate/start'] = array(
  'title' => 'Start',
  'page callback' => 'd2b_migrate_main_page',
  'page arguments' => array('start'),
  'access callback' => TRUE,
  'type' => MENU_CALLBACK,
  );
  $items['d2b-migrate/source'] = array(
  'title' => 'Source database setup',
  'page callback' => 'd2b_migrate_main_page',
  'page arguments' => array('source'),
  'access callback' => TRUE,
  'type' => MENU_CALLBACK,
  );
  $items['d2b-migrate/analysis'] = array(
  'title' => 'Source database analysis',
  'page callback' => 'd2b_migrate_main_page',
  'page arguments' => array('analysis'),
  'access callback' => TRUE,
  'type' => MENU_CALLBACK,
  );
  $items['d2b-migrate/backup'] = array(
  'title' => 'Set up database backup',
  'page callback' => 'd2b_migrate_main_page',
  'page arguments' => array('backup'),
  'access callback' => TRUE,
  'type' => MENU_CALLBACK,
  );
  $items['d2b-migrate/files'] = array(
  'title' => 'Files backup',
  'page callback' => 'd2b_migrate_main_page',
  'page arguments' => array('files'),
  'access callback' => TRUE,
  'type' => MENU_CALLBACK,
  );
  $items['d2b-migrate/restore'] = array(
  'title' => 'Migrate database',
  'page callback' => 'd2b_migrate_main_page',
  'page arguments' => array('restore'),
  'access callback' => TRUE,
  'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function d2b_migrate_theme($existing, $type, $theme, $path) {
  return array(
    'd2b_migrate_page' => array(
      'variables' => array('current_task' => NULL, 'main_content' => NULL),
      'template' => 'migrate-page',
    ),
  );
}

/**
 * Add some variables for the projects install theme.
 *
 * @param $variables
 *   An associative array containing:
 *     - current_task : the current task.
 */
function template_preprocess_d2b_migrate_page(&$variables) {
  $variables['task_list'] = d2b_migrate_task_list($variables['current_task']);
}

/**
 * Get a task list to the sidebar area when installing projects.
 *
 * This will need to be called from every page of the install process.
 *
 * @param $active
 *   (Optional) Set the active task by key.
 *
 * @return string
 *   The rendered HTML for the installation task list.
 */
function d2b_migrate_task_list($active = NULL) {
  // Default list of tasks.
  $tasks = array(
    'start' => t('Start'),
    'source' => t('Source database'),
    'analysis' => t('Database analysis'),
    'backup' => t('Database backup'),
    'files' => t('Backup files'),
    'restore' => t('Migrate database'),
  );

  require_once BACKDROP_ROOT . '/core/includes/theme.maintenance.inc';

  return theme('task_list', array('items' => $tasks, 'active' => $active));
}

/**
 * Menu callback; page to install projects.
 *
 * @param $op
 *   Operation to preform.
 *
 * @return string
 *   The rendered installation page.
 */
function d2b_migrate_main_page($op) {
  backdrop_add_css(backdrop_get_path('module', 'd2b_migrate') . '/d2b_migrate.css', array('preprocess' => FALSE));

  switch ($op) {
    case 'start':
      backdrop_set_title(t("Start"));
      $content = 'd2b_migrate_start_form';
      break;
    case 'source':
      backdrop_set_title(t("Source database"));
      $content = 'd2b_migrate_source_database_form';
      break;
    case 'analysis':
      backdrop_set_title(t("Source analysis"));
      $content = 'd2b_migrate_analysis_form';
      break;
    case 'backup':
      backdrop_set_title(t("Save DB backup"));
      $content = 'd2b_migrate_backup_form';
      break;
    case 'files':
      backdrop_set_title(t("Files backup"));
      $content = 'd2b_migrate_files_form';
      break;
    case 'restore':
      backdrop_set_title(t("Migrate database"));
      $content = 'd2b_migrate_restore_form';
      break;
    default:
      return MENU_NOT_FOUND;
  }
  $form = backdrop_get_form($content);
  return theme('d2b_migrate_page', array('current_task' => $op, 'main_content' => backdrop_render($form)));
}

function d2b_migrate_admin_paths() {
  $paths = array(
    'd2b-migrate/*' => TRUE,
  );
  return $paths;
}

function d2b_migrate_start_form($form, &$form_state) {
  // @todo; setup at start.
  $private_files = config_get('system.core','file_private_path');
  if (empty($private_files)) {
    backdrop_set_message(t('You must specify a private file system path in the !settings to continue.', array('!settings' => l(t('file system settings'), 'admin/config/media/file-system'))), 'warning');
  }
  $form['help'] = array(
    '#type' => 'help',
    '#markup' => t('This form will require access to the source database. This will be required in the next step.'),
  );
  $form['actions'] = array(
    '#type' => 'actions',
  );
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Next: source database'),
    '#disabled' => empty($private_files),
  );
  return $form;
}

/**
 * Submit the item edit form.
 */
function d2b_migrate_start_form_submit($form, &$form_state) {
  $form_state['redirect'] = 'd2b-migrate/source';
}


function d2b_migrate_source_database_form($form, &$form_state) {
  backup_migrate_include('crud');

  $form = backup_migrate_crud_ui_create('source', 'mysql');
  $form['#validate'] = array('d2b_migrate_source_database_form_validate');
  $form['#submit'] = array('d2b_migrate_source_database_form_submit');
  return $form;
}

function d2b_migrate_form_backup_migrate_crud_edit_form_alter(&$form, &$form_state, $form_id) {
  $value = uniqid();
  $form['help'] = array(
    '#type' => 'help',
    '#markup' => t('Enter the connection details for the source Drupal 7 site.'),
  );
  $form['name']['#type'] = 'value';
  $form['name']['#value'] = $value;
  $form['machine_name']['#type'] = 'value';
  $form['machine_name']['#value'] = $value;
  $form['actions']['submit']['#value'] = t('Connect');
}

/**
 * Submit the item edit form.
 */
function d2b_migrate_source_database_form_validate($form, &$form_state) {
  // Connect to the Drupal database to check that it is valid.
  try {
    $form_state['values'] = array_merge($form_state['values'], $form_state['input']);
    $source = $form_state['values'];

    $d7_database = array(
      'database' => $source['path'],
      'username' => $source['user'],
      'password' => $source['pass'],
      'host' => $source['host'],
      'port' => $source['port'],
      'driver' => $source['scheme']
    );

    Database::addConnectionInfo('migrateKeys', 'default', $d7_database);
    db_set_active('migrateKeys');

    // Query a table which does not exist in Backdrop.
    $result = db_query('SELECT * FROM {role}');
    db_set_active();
  }
  catch (\PDOException $e) {
    form_set_error('path', t('Could not connect to the database, or it is not a Drupal database.'));
    db_set_active();
  }
}

/**
 * Submit the item edit form.
 */
function d2b_migrate_source_database_form_submit($form, &$form_state) {
  $item = $form_state['values']['item'];
  // For some reason, the info is not in form_state values. Use input.
  // This should be OK since we validate the input above.
  $form_state['values'] = array_merge($form_state['values'], $form_state['input']);

  $item->edit_form_submit($form, $form_state);

  // Save the BAM database name in config so we can use it later.
  // @Todo: delete this config file after the upgrade completes.
  config_set('d2b_migrate.settings', 'source_db_machine_name', $form_state['values']['machine_name']);
  backdrop_set_message(t('Source database has been saved.'));
  $form_state['redirect'] = 'd2b-migrate/analysis';
}

function d2b_migrate_analysis_form($form, &$form_state) {
  $projects = _update_cache_get('d2b_migrate_get_cached_projects');

  $project_data = !empty($projects->data) ? $projects->data : array();
  // Try and build a real name for the project.
  foreach ($project_data as $key => $project) {
    if (backdrop_get_filename('module', $key)) {
      $location = t('Already downloaded');
      $project_data[$key]['location'] = 'already_downloaded';
    }
    if (isset($project['includes'][$key])) {
      $project_data[$key]['realname'] = $project['includes'][$key];
    }
    else {
      $project_data[$key]['realname'] = ucfirst($key);
    }
  }
  backdrop_sort($project_data, array('location' => SORT_STRING));

  $header = array(
    'project_name' => array('data' => t('Project name')),
    'type' => array('data' => t('Type')),
    'location' => t('Location'),
  );
  $rows = array();

  $downloadables = array();
  foreach ($project_data as $project_name => $project) {
    $form_state['redirect'] = 'admin/installer/install/select_versions';
    $row = array();
    if (isset($project['in_core_since'])) {
      $location = t('In core');
    }
    elseif ($project['location'] == 'already_downloaded') {
      $location = t('Already downloaded');
    }
    elseif ($project['location'] == 'backdrop') {
      $downloadables[$project_name] = $project;
      $location = t('Available for download');
    }
    elseif ($project['location'] == 'github') {
      $location = l(t('Download from GitHub'), 'https://github.com/backdrop-contrib/' . $project_name, array('external' => TRUE, 'attributes' => array('target'=>'_blank')));
    }
    elseif ($project['location'] == 'not_found') {
      $location = t('Not yet ported');
    }

    $row['project_name'] = $project['realname'];
    $row['type'] = t('Module');
    $row['location'] = $location;
    $rows[$project_name] = $row;
  }

  $form['help'] = array(
    '#type' => 'help',
    '#markup' => t('Click the "Update project data" button to fetch the list of modules installed on the source Drupal 7 site and see their availability in Backdrop. Click the "Download available projects" button to download all modules listed as "Available for download". Modules available on GitHub must be downloaded manually.'),
  );

  $form['downloadables'] = array(
    '#type' => 'value',
    '#value' => $downloadables,
  );

  $markup = theme('table', array(
    'header' => $header,
    'rows' => $rows,
    'empty' => t('No source module data was found.'),
    'attributes' => array('class' => array('source-modules-list')),
   ));

  $form['projects'] = array(
    '#markup' => $markup,
    // '#header' => $header,
    // '#options' => $rows,
    // '#empty' => t('No source module data was found.'),
    // '#attributes' => array('class' => array('source-modules-list')),
  );

  $form['fetch'] = array(
    '#type' => 'submit',
    '#submit' => array('d2b_migrate_analysis_fetch_projects'),
    '#value' => t('Update project data'),
  );
  $form['installer'] = array(
    '#type' => 'submit',
    '#submit' => array('d2b_migrate_analysis_download_projects'),
    '#value' => t('Download available projects'),
  );
  $form['actions'] = array(
    '#type' => 'actions',
  );
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Next: backup database'),
  );

  return $form;
}

/**
 * Submit the item edit form.
 */
function d2b_migrate_analysis_download_projects($form, &$form_state) {
  module_load_include('inc', 'installer', 'installer.browser');

  $modules = installer_browser_fetch_results(array('items_per_page' => 999, 'type' => 'module'));
  $all_projects = $modules['projects'];

  $batch_projects = array();
  foreach ($form_state['values']['downloadables'] as $project_name => $downloadable) {
    installer_browser_install_queue_add($all_projects[$project_name]);
    $batch_projects[$project_name] = $all_projects[$project_name];
  }
  unset($_SESSION['installer_browser_install_releases_list']);

  d2b_migrate_analysis_batch_download($batch_projects);
  // $form_state['redirect'] = 'admin/installer/install/select_versions';
}

/**
 * Submit the item edit form.
 */
function d2b_migrate_analysis_batch_download($projects) {
  foreach ($projects as $project) {
    if ($project) {
      // Get the available releases for this project.
      $release_data = installer_browser_get_project_release_data($project);
      if (!$release_data) {
        backdrop_set_message(t('Could not fetch releases for project %project.', array('%project' => $project['title'])), 'warning');
        watchdog('installer', 'Could not fetch releases for project %project.', array('%project' => $project['title']), WATCHDOG_ERROR);
        installer_browser_install_queue_remove($project['name']);
        continue;
      }

      // We use the update module to calculate the recommended version.
      $project_data = array(
        'existing_major' => 0,
        'existing_version' => 0,
        'install_type' => '',
      );
      module_load_include('inc', 'update', 'update.compare');
      update_calculate_project_update_status($project_data, $release_data);

      $releases[$project['name']]['release_name'] = isset($project_data['recommended']) ? $project_data['recommended'] : key($release_data);
      $releases[$project['name']]['project'] = $project;
    }
  }

  module_load_include('inc', 'installer', 'installer.browser');
  // Store maintenance_mode setting so we can restore it when done.
  $_SESSION['maintenance_mode'] = state_get('maintenance_mode', FALSE);
    //state_set('maintenance_mode', TRUE);

  foreach ($releases as $item) {
    // Load the selected release.
    if ($release = installer_browser_get_release($item['release_name'], $item['project'])) {
      // Add the release to a session variable.
      $_SESSION['installer_browser_install_releases_list'][$item['release_name']] = $item['project'];
    }
  }

  // Install the projects with batch.
  module_load_include('inc', 'installer', 'installer.manager');

  $queued_releases = installer_browser_get_queued_releases();
  $operations = array();
  foreach ($queued_releases as $release_name => $project) {
    $operations[] = array('_installer_browser_batch_install_release', array($release_name, $project));
  }
  $batch = array(
    'operations' => $operations,
    'finished' => '_d2b_migrate_analysis_batch_download_finished',
    'title' => t('Installing projects'),
    'init_message' => t('Installing projects...'),
    'progress_message' => t('Installed @current out of @total.'),
    'error_message' => t('Installation has encountered an error.'),
    'file' => backdrop_get_path('module', 'installer') . '/installer.browser.inc',
  );
  batch_set($batch);
}


/**
 * Batch API callback: shows a message and finishes up the batch.
 */
function _d2b_migrate_analysis_batch_download_finished($success, $results, $operations) {
  // Although we turn off maintenance mode immediately, the message that the
  // site is offline displays until a page reload. We wipe the messages cache
  // here to avoid this.
  backdrop_get_messages();

  // Restore the maintenance mode to what it was at the start.
  if (isset($_SESSION['maintenance_mode'])) {
    state_set('maintenance_mode', $_SESSION['maintenance_mode']);
    unset($_SESSION['maintenance_mode']);
  }

  unset($_SESSION['installer_browser_install_releases_list']);
  if ($success) {
    if (!empty($results)) {
      if (!empty($results['failures'])) {
        backdrop_set_message(format_plural(count($results['failures']), 'Failed to install one project.', 'Failed to install @count projects.'), 'error');
        foreach($results['failures'] as $message){
          backdrop_set_message($message, 'error');
        }
      }
    }
  }
  else {
    backdrop_set_message(t('Error installing projects.'), 'error');
    backdrop_goto('d2b-migrate/analysis');
  }

  $projects = installer_browser_get_installed_projects();
  $missing = installer_browser_get_missing_dependencies($projects);
  // If there are missing dependencies, go to install dependencies.
  if (count($missing) > 0) {
    // @Todo: since projects come from an existing site, youd expect all dependencies
    // to be in the list, but we could probaby figure some action for this.
    backdrop_goto('d2b-migrate/analysis');
  }
  else {
    backdrop_goto('d2b-migrate/analysis');
  }
}

/**
 * Submit the item edit form.
 */
function d2b_migrate_analysis_form_submit($form, &$form_state) {
  $form_state['redirect'] = 'd2b-migrate/backup';
}

/**
 * Submit the item edit form.
 */
function d2b_migrate_analysis_fetch_projects($form, &$form_state) {
  backup_migrate_include('sources');
  $database = config_get('d2b_migrate.settings', 'source_db_machine_name');

  $sources = backup_migrate_get_sources();
  $source = $sources[$database]->dest_url;

  $d7_database = array(
    'database' => $source['path'],
    'username' => $source['user'],
    'password' => $source['pass'],
    'host' => $source['host'],
    'port' => $source['port'],
    'driver' => $source['scheme']
  );

  Database::addConnectionInfo('migrateKey', 'default', $d7_database);
  db_set_active('migrateKey');

  try {
    $result = db_query('SELECT * FROM {system}');
  }
  catch (Exception $exception) {
    db_set_active();
    backdrop_set_message(t('Could not connect to the database: "@error".', array('@error' => $exception->getMessage())), 'error');
    $form_state['redirect'] = 'd2b-migrate/analysis';
    return;
  }

  db_set_active();

  $system_list = array();

  foreach ($result as $record) {
    $record->info = unserialize($record->info);
    // Only include visible contrib modules.
    // @Todo: contrib themes would still be in this; need to exclude them.
    if (!empty($record->info['hidden'])) {
      continue;
    }
    if (strpos($record->filename, 'modules/') === 0) {
      continue;
    }
    if (strpos($record->filename, 'themes/') === 0) {
      continue;
    }
    $record->info['_info_file_ctime'] = 1;
    $system_list[$record->name] = $record;
  }
  module_load_include('inc', 'update', 'update.compare');
  $projects = array();
  _update_process_info_list($projects, $system_list, 'module', FALSE);
  _update_process_info_list($projects, $system_list, 'module', TRUE);
  // After we fetch the project list, now we're going to use batch API to
  // see if there are Backdrop versions of each and save this in the project
  // metadata. This is quite intensive so we save in upgrade cache once fetched.
  $cached_projects = _update_cache_get('d2b_migrate_get_cached_projects');
  $cached_project_data = array();

  // If we haven't fetched before, then build the batch operation to fetch.
  if (!empty($cached_projects->data)) {
    $cached_project_data = $cached_projects->data;
  }

  module_load_include('inc', 'd2b_migrate', 'd2b_migrate.core');

  // Check for projects that are already in Backdrop core. We don't need to
  // check for contrib versions of those of course.
  foreach ($projects as $project) {
    if (!isset($cached_project_data[$project['name']])) {
      $core = d2b_migrate_core($projects, $project['name']);
    }
  }

  $operations = array();
  foreach ($projects as $project) {
    if (!isset($cached_project_data[$project['name']])) {
      $operations[] = array('d2b_migrate_analysis_fetch_project', array($project));
    }
  }
  if (!empty($operations)) {
    $batch = array(
      'operations' => $operations,
      'finished' => 'd2b_migrate_analysis_fetch_project_finished',
      'title' => t('Processing project'),
      'init_message' => t('Fetching data about projects.'),
      'progress_message' => t('Processed @current out of @total.'),
      'error_message' => t('Batch project fetch encountered an error.'),
    );
    batch_set($batch);
    batch_process('d2b-migrate/analysis');
  }
  else {
    backdrop_set_message(t('All projects updated'));
    $form_state['redirect'] = 'd2b-migrate/analysis';
  }
}

function d2b_migrate_analysis_fetch_project($project, &$context) {
  $project_name = $project['name'];
  if (!empty($project['in_core_since'])) {
    $project['location'] = 'in_core';
  }
  else {
    $url = D2B_MIGRATE_UPDATE_DEFAULT_URL . '/' . $project_name . '/1.x';
    $xml = backdrop_http_request($url);
    module_load_include('inc', 'update', 'update.fetch');
    if (!isset($xml->error) && isset($xml->data) && $data = update_parse_xml($xml->data)) {
      $project['location'] = 'backdrop';
    }
    else {
      $github = 'https://github.com/backdrop-contrib/' . $project_name;
      $response = backdrop_http_request($github);
      if ($response->code != '404') {
        $project['location'] = 'github';
      }
      else {
        $project['location'] = 'not_found';
      }
    }
  }

  $context['results']['projects'][$project_name] = $project;
  $context['message'] = t('Processing project "@title"', array('@title' => $project['info']['name']));
}

function d2b_migrate_analysis_fetch_project_finished($success, $results, $operations) {
  if ($success) {
    $cached_data = _update_cache_get('d2b_migrate_get_cached_projects');
    if (!empty($cached_data->data)) {
      $data = array_merge($cached_data->data, $results['projects']);
    }
    else {
      $data = $results['projects'];
    }
    _update_cache_set('d2b_migrate_get_cached_projects', $data, REQUEST_TIME + 3600);
    // Here we could do something meaningful with the results.
    // We just display the number of nodes we processed...
    drupal_set_message(t('@count projects  processed.', array('@count' => count($results['projects']))));
  } else {
    // An error occurred.
    // $operations contains the operations that remained unprocessed.
    $error_operation = reset($operations);
    drupal_set_message(t('An error occurred while processing @operation with arguments : @args', array('@operation' => $error_operation[0], '@args' => print_r($error_operation[0], TRUE))));
  }
}

function d2b_migrate_backup_form($form, &$form_state) {
  backup_migrate_include('profiles');

  $settings = _backup_migrate_profile_saved_default_profile();

  list($files, $fetch_time, $remote) = backup_migrate_get_saved_backups();

  $db_saved = FALSE;
  $source_db_machine_name = config_get('d2b_migrate.settings', 'source_db_machine_name');
  foreach ($files as $file) {
    if ($file->file_info['bam_sourceid'] == $source_db_machine_name) {
      $db_saved = TRUE;
    }
  }

  $form['help'] = array(
    '#type' => 'help',
    '#markup' => t('Download a copy of the source database. This downloads and also saves to private directory. This is a required step.'),
  );

  $form['db_saved'] = array(
    '#access' => $db_saved,
    '#type' => 'markup',
    '#markup' => '<div class="d2b-db-saved"><span class="task-item">' . t('Database backup has been saved to private files folder.') . '</span></div>',
  );
  //$jslink = "setTimeout(function(){ window.location = '/d2b-migrate/backup'; }, 5000);";
  $form['backup'] = array(
    '#type' => 'submit',
    '#name' => 'submitbtn',
		//'#attributes' => array('onclick' => $jslink),
    '#submit' => array('d2b_migrate_backup_form_backup'),
    '#value' => $db_saved ? t('Re-download database'): t('Download database'),
  );
  $form['continue'] = array(
    '#type' => 'markup',
    '#markup' => l(t('Click here to continue after the file has downloaded'), 'd2b-migrate/backup'),
  );
  $form['actions'] = array(
    '#type' => 'actions',
  );
  // @todo: Hide this if the database isnt yet downloaded.
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#access' => $db_saved,
    '#value' => t('Next: backup files'),
    '#submit' => array('d2b_migrate_backup_form_submit'),
  );
  return $form;
}

function d2b_migrate_backup_form_backup($form, &$form_state) {
  backup_migrate_include('sources');
  backup_migrate_include('destinations');
  backup_migrate_include('profiles');

  $sources = backup_migrate_get_sources();
  $destinations = backup_migrate_get_destinations();

  $settings = _backup_migrate_profile_saved_default_profile();

  $settings->destination_id = array('manual', 'download');

  $database = config_get('d2b_migrate.settings', 'source_db_machine_name');
  $settings->source_id = $database;

  backup_migrate_ui_manual_backup_perform($settings);

  backdrop_set_message(t('Your database has been backed up.'));
}

function d2b_migrate_backup_form_submit($form, &$form_state) {
  $form_state['redirect'] = 'd2b-migrate/files';
}

function d2b_migrate_files_form($form, &$form_state) {
  $form['help'] = array(
    '#type' => 'help',
    '#markup' => t('Copy "managed" files from the source site. Managed files are files with a database record. Many files in the public files directory may not have a database record, such as default images and image styles. This method of migrating files requires the file URL be known and accessible over http, and is unreliable. The recommended option for migrating files is to manually copy the directory contents from the server.'),
  );
  $form['source_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Source site URL'),
    '#default_value' => '',
    '#description' => t('Enter the URL of the existing Drupal 7 site.')
  );
  $form['backup'] = array(
    '#type' => 'submit',
    '#submit' => array('d2b_migrate_files_form_backup'),
    '#value' => t('Copy files'),
  );
  $form['actions'] = array(
    '#type' => 'actions',
  );
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Next: migrate database'),
    '#submit' => array('d2b_migrate_files_form_submit'),
  );
  return $form;
}


function d2b_migrate_files_form_backup($form, &$form_state) {
  $source_base_path = $form_state['values']['source_url'];
  $source_database = config_get('d2b_migrate.settings', 'source_db_machine_name');

  backup_migrate_include('sources');

  $sources = backup_migrate_get_sources();
  $source = $sources[$source_database]->dest_url;

  $d7_database = array(
    'database' => $source['path'],
    'username' => $source['user'],
    'password' => $source['pass'],
    'host' => $source['host'],
    'driver' => $source['scheme']
  );

  Database::addConnectionInfo('migrateKey', 'default', $d7_database);
  db_set_active('migrateKey');

  $result = db_query('SELECT uri FROM {file_managed}')->fetchCol();

  db_set_active();

  foreach ($result as $record) {
    $path_info = pathinfo($record);
    if (strpos($record, 'public://') === 0) {
      $dir_path = substr($path_info['dirname'], 9);
      $stream = backdrop_realpath('public://');
    }
    elseif (strpos($record, 'private://') === 0) {
      continue;
    }
    $source_file = $source_base_path . $dir_path . '/' . $path_info['basename'];
    $new_dir = $stream . '/' . $dir_path;
    file_prepare_directory($new_dir, FILE_CREATE_DIRECTORY);
    $new_file = $new_dir . '/' . $path_info['basename'];

    if (copy($source_file, $new_file) ) {
        // dpm( "Copy success!");
    }else{
        // dpm( "Copy no success!");
    }
  }
}

function d2b_migrate_files_form_submit($form, &$form_state) {
  $form_state['redirect'] = 'd2b-migrate/restore';
}

/**
 * The restore/import upload form.
 */
function d2b_migrate_restore_form($form, &$form_state) {
  backup_migrate_include('filters', 'destinations', 'sources');

  $form = array();
  $form['help'] = array(
    '#type' => 'help',
    '#markup' => t('This step will empty the database of the current site and restore it with the database file from the Drupal site. After this is complete, you will be redirected to run database updates. <strong>This is the final step and cannot be reversed.</strong>'),
  );

  list($files, $fetch_time, $remote) = backup_migrate_get_saved_backups();

  $keys = array_keys($files);
  array_unshift($keys, t('Choose a saved backup'));
  $default = reset($keys);
  $form['backup_saved'] = array(
    '#type' => 'select',
    '#options' => $keys,
    '#default_value' => $default,
    '#files' => $files,
  );

  $form['backup_upload'] = array(
    '#title' => t('Or upload a backup file'),
    '#type' => 'file',
    '#description' => t("Upload a backup file created by Backup and Migrate. Max file size: %size", array("%size" => format_size(file_upload_max_size()))),
  );

  $form['saved'] = array(
    "#type" => "value",
    "#value" => $keys,
  );
  $form['source_id'] = array(
    "#type" => "value",
    "#value" => 'db',
  );

  $form['actions'] = array(
    '#type' => 'actions',
  );
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Upgrade database'),
  );

  return $form;
}

/**
 * The restore/import upload form.
 */
function d2b_migrate_restore_form_submit($form, &$form_state) {
  backup_migrate_include('destinations');
  $validators = array('file_validate_extensions' => array('gz zip sql mysql bz bz2'));

  $values = $form_state['values'];
  $values['source_id'] = 'db';
  if (!$values['backup_saved'] && $file = file_save_upload('backup_upload', $validators)) {
  // if (!$values['backup_saved']) {
    $values['from'] = 'upload';

    d2b_migrate_perform_restore('upload', $file->uri, $values);
  }
  else {
    $values['from'] = 'saved';
    $values['file'] = $values['saved'][$values['backup_saved']];

    list($destination, $file_id) = explode('/', $values['file'], 2);

    d2b_migrate_perform_restore($destination, $file_id, $values);
  }

  // $form_state['redirect'] = 'core/update.php';
}


/**
 * Restore from a file in the given destination.
 */
function d2b_migrate_perform_restore($destination_id, $file, $settings = array()) {
  backup_migrate_include('files', 'filters');
  timer_start('backup_migrate_restore');

  // If not in 'safe mode', increase the maximum execution time:
  if (!ini_get('safe_mode') && ini_get('max_execution_time') < config_get('backup_migrate.settings','backup_migrate_backup_max_time')) {
    set_time_limit(config_get('backup_migrate.settings','backup_migrate_restore_max_time'));
  }

  // Make the settings into a default profile.
  if (!is_object($settings)) {
    $settings = backup_migrate_crud_create_item('profile', $settings);
    $settings->source_id = empty($settings->source_id) ? 'db' : $settings->source_id;
  }

  // Register shutdown callback.
  register_shutdown_function('d2b_migrate_shutdown', $settings);

  if (!is_object($file)) {
    // Load the file from the destination.
    $file = backup_migrate_destination_get_file($destination_id, $file);
    if (!$file) {
      _backup_migrate_message("Could not restore because the file could not be loaded from the destination.", array(), 'error');
      backup_migrate_cleanup();
      return FALSE;
    }
  }

  // Filter the file and perform the restore.
  $file = backup_migrate_filters_restore($file, $settings);
  if (!$file) {
    if (_backup_migrate_check_timeout()) {
      backup_migrate_restore_fail('Could not perform the restore because the script timed out. Try increasing your PHP <a href="!url">max_execution_time setting</a>.', array('!url' => 'http://www.php.net/manual/en/info.configuration.php#ini.max-execution-time'), 'error');
    }
    else {
      backup_migrate_restore_fail("Could not perform the restore.", array(), 'error');
    }
    backup_migrate_cleanup();
    return FALSE;
  }

  $time = timer_stop('backup_migrate_restore');

  // Delete any temp files we've created.
  backup_migrate_cleanup();

  // No errors. Return the file.
  return $file;
}

/**
 * Shutdown callback when the script terminates even if the script timed out.
 */
function d2b_migrate_shutdown($settings) {
  // If we ran out of time, set an error so the user knows what happened
  if (_backup_migrate_check_timeout()) {
    backup_migrate_cleanup();
    backup_migrate_backup_fail('The operation timed out. Try increasing your PHP <a href="!url">max_execution_time setting</a>.', array('!url' => 'http://www.php.net/manual/en/info.configuration.php#ini.max-execution-time'), $settings);
  }

  // The session will have already been written and closed, so we need to write any changes directly.
  _backdrop_session_write(session_id(), session_encode());

  // backdrop_goto() calls t() at some point, on whats now still essentially a D7 database,
  // which is missing a locale column and causes an exception. So we fake it.
  d2b_migrate_goto();
}


/**
 * Shutdown callback when the script terminates even if the script timed out.
 */
function d2b_migrate_goto() {
  $url = base_path() . 'core/update.php';

  header('Location: ' . $url, TRUE, 302);
  backdrop_exit($url);
}

/**
 * Returns all currently cached data about available releases for all projects.
 *
 * @return
 *   Array of data about available releases, keyed by project shortname.
 */
function d2b_migrate_get_cached_projects() {
  $data = array();
  $cache_items = _update_get_cache_multiple('d2b_migrate_get_cached_projects');
  foreach ($cache_items as $cid => $cache) {
    $cache->data['last_fetch'] = $cache->created;
    if ($cache->expire < REQUEST_TIME) {
      $cache->data['fetch_status'] = UPDATE_FETCH_PENDING;
    }
    // The project shortname is embedded in the cache ID, even if there's no
    // data for this project in the DB at all, so use that for the indexes in
    // the array.
    $parts = explode('::', $cid, 2);
    $data[$parts[1]] = $cache->data;
  }
  return $data;
}
