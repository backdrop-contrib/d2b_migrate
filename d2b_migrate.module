<?php

define('D2B_MIGRATE_UPDATE_DEFAULT_URL', 'https://updates.backdropcms.org/release-history');

/**
* Implements hook_menu().
*/
function d2b_migrate_menu() {
  $items['d2b-migrate-start'] = array(
  'title' => 'Start',
  'page callback' => 'backdrop_get_form',
  'page arguments' => array('d2b_migrate_start_form'),
  'access callback' => TRUE,
  'type' => MENU_CALLBACK,
  );
  $items['d2b-migrate-source'] = array(
  'title' => 'Source database setup',
  'page callback' => 'backdrop_get_form',
  'page arguments' => array('d2b_migrate_source_database_form'),
  'access callback' => TRUE,
  'type' => MENU_CALLBACK,
  );
  $items['d2b-migrate-analysis'] = array(
  'title' => 'Source database analysis',
  'page callback' => 'backdrop_get_form',
  'page arguments' => array('d2b_migrate_analysis_form'),
  'access callback' => TRUE,
  'type' => MENU_CALLBACK,
  );
  $items['d2b-migrate-backup'] = array(
  'title' => 'Set up database backup',
  'page callback' => 'backdrop_get_form',
  'page arguments' => array('d2b_migrate_backup_form'),
  'access callback' => TRUE,
  'type' => MENU_CALLBACK,
  );
  $items['d2b-migrate-files'] = array(
  'title' => 'Files backup',
  'page callback' => 'backdrop_get_form',
  'page arguments' => array('d2b_migrate_files_form'),
  'access callback' => TRUE,
  'type' => MENU_CALLBACK,
  );
  $items['d2b-migrate-restore'] = array(
  'title' => 'Migrate database',
  'page callback' => 'backdrop_get_form',
  'page arguments' => array('d2b_migrate_restore_form'),
  'access callback' => TRUE,
  'type' => MENU_CALLBACK,
  );

  return $items;
}

function d2b_migrate_start_form($form, &$form_state) {
  // @todo; setup at start.
  $private_files = config_get('system.core','file_private_path');
  if (empty($private_files)) {
    backdrop_set_message(t('You must specify a private file system path in the !settings to continue.', array('!settings' => l(t('file system settings'), 'admin/config/media/file-system'))), 'warning');
  }
  $form['help'] = array(
    '#type' => 'help',
    '#markup' => t('This form will require access to the source database. This will be required in the next step.'),
  );
  $form['actions'] = array(
    '#type' => 'actions',
  );
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Next: source database'),
    '#disabled' => empty($private_files),
  );
  return $form;
}

/**
 * Submit the item edit form.
 */
function d2b_migrate_start_form_submit($form, &$form_state) {
  $form_state['redirect'] = 'd2b-migrate-source';
}


function d2b_migrate_source_database_form($form, &$form_state) {
  backup_migrate_include('crud');

  $form = backup_migrate_crud_ui_create('source', 'mysql');
  $form['#validate'] = array('d2b_migrate_source_database_form_validate');
  $form['#submit'] = array('d2b_migrate_source_database_form_submit');
  return $form;
}


/**
 * Submit the item edit form.
 */
function d2b_migrate_source_database_form_validate($form, &$form_state) {
  try {
    $form_state['values'] = array_merge($form_state['values'], $form_state['input']);
    $source = $form_state['values'];

    $d7_database = array(
      'database' => $source['path'],
      'username' => $source['user'],
      'password' => $source['pass'],
      'host' => $source['host'],
      'driver' => $source['scheme']
    );

    Database::addConnectionInfo('migrateKeys', 'default', $d7_database);
    db_set_active('migrateKeys');

    // Query a table which does not exist in Backdrop.
    $result = db_query('SELECT * FROM {role}');
    db_set_active();
  }
  catch (\PDOException $e) {
    form_set_error('path', t('Could not connect to the database, or it is not a Drupal database.'));
    db_set_active();
  }
}

/**
 * Submit the item edit form.
 */
function d2b_migrate_source_database_form_submit($form, &$form_state) {
  $item = $form_state['values']['item'];
  $form_state['values'] = array_merge($form_state['values'], $form_state['input']);

  $item->edit_form_submit($form, $form_state);

  // config_set('d2b_migrate', 'source_db_machine_name', $form_state['values']['machine_name']);
  config_set('d2b_migrate.settings', 'source_db_machine_name', $form_state['values']['machine_name']);
  backdrop_set_message(t('Source database has been saved.'));
  $form_state['redirect'] = 'd2b-migrate-analysis';
}

function d2b_migrate_analysis_form($form, &$form_state) {
  $projects = _update_cache_get('d2b_migrate_get_cached_projects');

  $project_data = !empty($projects->data) ? $projects->data : array();

  $header = array(
    'project_name' => array('data' => t('Project name')),
    'type' => array('data' => t('Type')),
    'location' => t('Location'),
  );
  $rows = array();

  foreach ($project_data as $project_name => $project) {
    $row = array();
    if (isset($project['in_core_since'])) {
      $location = t('In core');
    }
    elseif ($project['location'] == 'backdrop') {
      $location = t('Downloadable via UI');
    }
    elseif ($project['location'] == 'github') {
      $location = t('Download from GitHub');
    }
    elseif ($project['location'] == 'not_found') {
      $location = t('Not yet ported');
    }
    
    $row['project_name'] = $project['info']['name'];
    $row['type'] = t('Module');
    $row['location'] = $location;
    $rows[$project_name] = $row;
  }

  $form['help'] = array(
    '#type' => 'help',
    '#markup' => t('Todo: this select table doesnt actually do anything much more than show which modules are enabled on the source site. The plan will be to allow selecting and downloading Backdrop versions here.'),
  );

  $form['projects'] = array(
    '#type' => 'tableselect',
    '#header' => $header,
    '#options' => $rows,
    '#empty' => t('No source module data was found.'),
    '#attributes' => array('class' => array('source-modules-list')),
  );

  $form['fetch'] = array(
    '#type' => 'submit',
    '#submit' => array('d2b_migrate_analysis_fetch_projects'),
    '#value' => t('Fetch projects'),
  );
  $form['actions'] = array(
    '#type' => 'actions',
  );
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Next: backup database'),
  );

  return $form;
}

/**
 * Submit the item edit form.
 */
function d2b_migrate_analysis_form_submit($form, &$form_state) {
  // backdrop_set_message(t('Source database has been saved.'));
  $form_state['redirect'] = 'd2b-migrate-backup';
}

/**
 * Submit the item edit form.
 */
function d2b_migrate_analysis_fetch_projects($form, &$form_state) {
  backup_migrate_include('sources');
  $database = config_get('d2b_migrate.settings', 'source_db_machine_name');

  $sources = backup_migrate_get_sources();
  $source = $sources[$database]->dest_url;

  $d7_database = array(
    'database' => $source['path'],
    'username' => $source['user'],
    'password' => $source['pass'],
    'host' => $source['host'],
    'driver' => $source['scheme']
  );

  Database::addConnectionInfo('migrateKey', 'default', $d7_database);
  db_set_active('migrateKey');

  $result = db_query('SELECT * FROM {system}');

  db_set_active();

  $system_list = array();

  foreach ($result as $record) {
    $record->info = unserialize($record->info);
    if (!empty($record->info['hidden'])) {
      continue;
    }
    if (strpos($record->filename, 'modules/') === 0) {
      continue;
    }
    if (strpos($record->filename, 'themes/') === 0) {
      continue;
    }
    $record->info['_info_file_ctime'] = 1;
    $system_list[$record->name] = $record;
  }
  module_load_include('inc', 'update', 'update.compare');
  $projects = array();
  _update_process_info_list($projects, $system_list, 'module', FALSE);

  $cached_projects = _update_cache_get('d2b_migrate_get_cached_projects');
  $cached_project_data = array();
  if (!empty($cached_projects->data)) {
    $cached_project_data = $cached_projects->data;
  }

  module_load_include('inc', 'd2b_migrate', 'd2b_migrate.core');
  foreach ($projects as $project) {
    if (!isset($cached_project_data[$project['name']])) {
      $core = d2b_migrate_core($projects, $project['name']);
    }
  }
  $operations = array();
  foreach ($projects as $project) {
    if (!isset($cached_project_data[$project['name']])) {
      $operations[] = array('d2b_migrate_analysis_fetch_project', array($project));
    }
  }
  if (!empty($operations)) {
    $batch = array(
      'operations' => $operations,
      'finished' => 'd2b_migrate_analysis_fetch_project_finished',
      'title' => t('Processing project'),
      'init_message' => t('Fetching data about projects.'),
      'progress_message' => t('Processed @current out of @total.'),
      'error_message' => t('Batch project fetch encountered an error.'),
    );
    batch_set($batch);
    batch_process('d2b-migrate-analysis');
  }
  else {
    drupal_set_message(t('All projects updated'));
    $form_state['redirect'] = 'd2b-migrate-analysis';
  }
}

function d2b_migrate_analysis_fetch_project($project, &$context) {
  $project_name = $project['name'];
  if (!empty($project['in_core_since'])) {
    $project['location'] = 'in_core';
  }
  else {
    $url = D2B_MIGRATE_UPDATE_DEFAULT_URL . '/' . $project_name . '/1.x';
    $xml = backdrop_http_request($url);
    module_load_include('inc', 'update', 'update.fetch');
    if (!isset($xml->error) && isset($xml->data) && $data = update_parse_xml($xml->data)) {
      $project['location'] = 'backdrop';
    }
    else {
      $github = 'https://github.com/backdrop-contrib/' . $project_name;
      $response = backdrop_http_request($github);
      if ($response->code != '404') {
        $project['location'] = 'github';
      }
      else {
        $project['location'] = 'not_found';
      }
    }
  }

  $context['results']['projects'][$project_name] = $project;
  $context['message'] = t('Processing project "@title"', array('@title' => $project['info']['name']));
}

function d2b_migrate_analysis_fetch_project_finished($success, $results, $operations) {
  if ($success) {
    _update_cache_set('d2b_migrate_get_cached_projects', $results['projects'], REQUEST_TIME + 3600);
    // Here we could do something meaningful with the results.
    // We just display the number of nodes we processed...
    drupal_set_message(t('@count projects  processed.', array('@count' => count($results['projects']))));
  } else {
    // An error occurred.
    // $operations contains the operations that remained unprocessed.
    $error_operation = reset($operations);
    drupal_set_message(t('An error occurred while processing @operation with arguments : @args', array('@operation' => $error_operation[0], '@args' => print_r($error_operation[0], TRUE))));
  }
}

function d2b_migrate_backup_form($form, &$form_state) {
  backup_migrate_include('profiles');

  $settings = _backup_migrate_profile_saved_default_profile();

  $form['help'] = array(
    '#type' => 'help',
    '#markup' => t('Download a copy of the source database. This downloads and also saves to private directory. This is a required step.'),
  );
  $form['backup'] = array(
    '#type' => 'submit',
    '#submit' => array('d2b_migrate_backup_form_backup'),
    '#value' => t('Download database'),
  );
  $form['actions'] = array(
    '#type' => 'actions',
  );
  // @todo: Hide this if the database isnt yet downloaded.
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Next: backup files'),
    '#submit' => array('d2b_migrate_backup_form_submit'),
  );
  return $form;
}

function d2b_migrate_backup_form_backup($form, &$form_state) {
  backup_migrate_include('sources');
  backup_migrate_include('destinations');
  backup_migrate_include('profiles');

  $sources = backup_migrate_get_sources();
  $destinations = backup_migrate_get_destinations();

  $settings = _backup_migrate_profile_saved_default_profile();

  $settings->destination_id = array('manual', 'download');

  $database = config_get('d2b_migrate.settings', 'source_db_machine_name');
  $settings->source_id = $database;

/*   // Add the second destination.
  if (!empty($form_state['values']['copy_destination_id'])) {
    $settings->destination_id[] = $form_state['values']['copy_destination_id'];
  }
 */
  backup_migrate_ui_manual_backup_perform($settings);

  backdrop_set_message(t('Your database has been backed up.'));
}

function d2b_migrate_backup_form_submit($form, &$form_state) {
  $form_state['redirect'] = 'd2b-migrate-files';
}

function d2b_migrate_files_form($form, &$form_state) {
  $form['help'] = array(
    '#type' => 'help',
    '#markup' => t('Copy the files directory on the source site. This works but disabled by default until better tested. Comment out the #disabled key on the submit button to test'),
  );
  $form['source_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Source site URL'),
    '#default_value' => '',//config_get('d2b_migrate.settings', 'source_url'),
    '#description' => t('Enter the URL of the existing Drupal 7 site.')
  );
  $form['backup'] = array(
    '#disabled' => TRUE,
    '#type' => 'submit',
    '#submit' => array('d2b_migrate_files_form_backup'),
    '#value' => t('Copy files'),
  );
  $form['actions'] = array(
    '#type' => 'actions',
  );
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Next: migrate database'),
    '#submit' => array('d2b_migrate_files_form_submit'),
  );
  return $form;
}


function d2b_migrate_files_form_backup($form, &$form_state) {
  $source_base_path = $form_state['values']['source_url'];
  $source_database = config_get('d2b_migrate.settings', 'source_db_machine_name');

  backup_migrate_include('sources');

  $sources = backup_migrate_get_sources();
  $source = $sources[$source_database]->dest_url;

  $d7_database = array(
    'database' => $source['path'],
    'username' => $source['user'],
    'password' => $source['pass'],
    'host' => $source['host'],
    'driver' => $source['scheme']
  );

  Database::addConnectionInfo('migrateKey', 'default', $d7_database);
  db_set_active('migrateKey');

  $result = db_query('SELECT uri FROM {file_managed}')->fetchCol();

  db_set_active();

  foreach ($result as $record) {
    $path_info = pathinfo($record);
    if (strpos($record, 'public://') === 0) {
      $dir_path = substr($path_info['dirname'], 9);
      $stream = backdrop_realpath('public://');
    }
    elseif (strpos($record, 'private://') === 0) {
      $dir_path = substr($path_info['dirname'], 11);
      $stream = backdrop_realpath('private://');
    }
    $source_file = $source_base_path . $dir_path . '/' . $path_info['basename'];
    $new_dir = $stream . '/nnn/' . $dir_path;
    file_prepare_directory($new_dir, FILE_CREATE_DIRECTORY);
    $new_file = $new_dir . '/' . $path_info['basename'];

    if (copy($source_file, $new_file) ) {
        // dpm( "Copy success!");
    }else{
        // dpm( "Copy no success!");
    }
  }
}

function d2b_migrate_files_form_submit($form, &$form_state) {
  $form_state['redirect'] = 'd2b-migrate-restore';
}

/**
 * The restore/import upload form.
 */
function d2b_migrate_restore_form() {
  backup_migrate_include('filters', 'destinations', 'sources');


  $form = array();

  list($files, $fetch_time, $remote) = backup_migrate_get_saved_backups();

  $keys = array_keys($files);
  array_unshift($keys, t('Choose a saved backup'));
  $default = reset($keys);
  $form['backup_saved'] = array(
    '#type' => 'select',
    '#options' => $keys,
    '#default_value' => $default,
    '#files' => $files,
  );


  $form['backup_upload'] = array(
    '#title' => t('Or upload a backup file'),
    '#type' => 'file',
    '#description' => t("Not tested. Upload a backup file created by Backup and Migrate. For other database or file backups please use another tool for import. Max file size: %size", array("%size" => format_size(file_upload_max_size()))),
  );

  $form['saved'] = array(
    "#type" => "value",
    "#value" => $keys,
  );
  $form['source_id'] = array(
    "#type" => "value",
    "#value" => 'db',
  );

  $form['actions'] = array(
    '#type' => 'actions',
  );
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Upgrade database'),
  );

  return $form;
}

/**
 * The restore/import upload form.
 */
function d2b_migrate_restore_form_submit($form, &$form_state) {
  backup_migrate_include('destinations');
  $validators = array('file_validate_extensions' => array('gz zip sql mysql bz bz2'));

  $values = $form_state['values'];
  $values['source_id'] = 'db';
  if (!$values['backup_saved'] && $file = file_save_upload('backup_upload', $validators)) {
  // if (!$values['backup_saved']) {
    $values['from'] = 'upload';
    d2b_migrate_perform_restore('upload', $file->uri, $values);
  }
  else {
    $values['from'] = 'saved';
    $values['file'] = $values['saved'][$values['backup_saved']];

    list($destination, $file_id) = explode('/', $values['file'], 2);
    d2b_migrate_perform_restore($destination, $file_id, $form_state['values']);
  }

  $form_state['redirect'] = 'core/update.php';
}


/**
 * Restore from a file in the given destination.
 */
function d2b_migrate_perform_restore($destination_id, $file, $settings = array()) {
  backup_migrate_include('files', 'filters');
  timer_start('backup_migrate_restore');

  // If not in 'safe mode', increase the maximum execution time:
  if (!ini_get('safe_mode') && ini_get('max_execution_time') < config_get('backup_migrate.settings','backup_migrate_backup_max_time')) {
    set_time_limit(config_get('backup_migrate.settings','backup_migrate_restore_max_time'));
  }

  // Make the settings into a default profile.
  if (!is_object($settings)) {
    $settings = backup_migrate_crud_create_item('profile', $settings);
    $settings->source_id = empty($settings->source_id) ? 'db' : $settings->source_id;
  }

  // Register shutdown callback.
  register_shutdown_function('d2b_migrate_shutdown', $settings);

  if (!is_object($file)) {
    // Load the file from the destination.
    $file = backup_migrate_destination_get_file($destination_id, $file);
    if (!$file) {
      _backup_migrate_message("Could not restore because the file could not be loaded from the destination.", array(), 'error');
      backup_migrate_cleanup();
      return FALSE;
    }
  }

  // Filter the file and perform the restore.
  $file = backup_migrate_filters_restore($file, $settings);
  if (!$file) {
    if (_backup_migrate_check_timeout()) {
      backup_migrate_restore_fail('Could not perform the restore because the script timed out. Try increasing your PHP <a href="!url">max_execution_time setting</a>.', array('!url' => 'http://www.php.net/manual/en/info.configuration.php#ini.max-execution-time'), 'error');
    }
    else {
      backup_migrate_restore_fail("Could not perform the restore.", array(), 'error');
    }
    backup_migrate_cleanup();
    return FALSE;
  }

  $time = timer_stop('backup_migrate_restore');

  // Delete any temp files we've created.
  backup_migrate_cleanup();

  // No errors. Return the file.
  return $file;
}

/**
 * Shutdown callback when the script terminates even if the script timed out.
 */
function d2b_migrate_shutdown($settings) {
  // If we ran out of time, set an error so the user knows what happened
  if (_backup_migrate_check_timeout()) {
    backup_migrate_cleanup();
    backup_migrate_backup_fail('The operation timed out. Try increasing your PHP <a href="!url">max_execution_time setting</a>.', array('!url' => 'http://www.php.net/manual/en/info.configuration.php#ini.max-execution-time'), $settings);
  }

  // The session will have already been written and closed, so we need to write any changes directly.
  _backdrop_session_write(session_id(), session_encode());
  d2b_migrate_goto();
}


/**
 * Shutdown callback when the script terminates even if the script timed out.
 */
function d2b_migrate_goto() {
  $url = base_path() . 'core/update.php';

  header('Location: ' . $url, TRUE, 302);
  backdrop_exit($url);
}

/**
 * Returns all currently cached data about available releases for all projects.
 *
 * @return
 *   Array of data about available releases, keyed by project shortname.
 */
function d2b_migrate_get_cached_projects() {
  $data = array();
  $cache_items = _update_get_cache_multiple('d2b_migrate_get_cached_projects');
  foreach ($cache_items as $cid => $cache) {
    $cache->data['last_fetch'] = $cache->created;
    if ($cache->expire < REQUEST_TIME) {
      $cache->data['fetch_status'] = UPDATE_FETCH_PENDING;
    }
    // The project shortname is embedded in the cache ID, even if there's no
    // data for this project in the DB at all, so use that for the indexes in
    // the array.
    $parts = explode('::', $cid, 2);
    $data[$parts[1]] = $cache->data;
  }
  return $data;
}
